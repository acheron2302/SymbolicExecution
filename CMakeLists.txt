# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Options
option(gtest_force_shared_crt "" OFF)

project(SymbolicExecution)

# Subdirectory: deps
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/deps")
else()
	set(CMAKE_FOLDER deps)
endif()
add_subdirectory(deps)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Target: SymbolicExecution
set(SymbolicExecution_SOURCES
	"src/Analysis/LiftWrapper.cpp"
	"src/Analysis/ReachingDefinitionAnalysis.cpp"
	"src/Block/Block.cpp"
	"src/Block/Dominator.cpp"
	"src/Block/Function.cpp"
	"src/ReadFileUtil.cpp"
	"src/TraversalDisassemble.cpp"
	"src/main.cpp"
	"src/translation/SubVexIL.cpp"
	cmake.toml
)

add_executable(SymbolicExecution)

target_sources(SymbolicExecution PRIVATE ${SymbolicExecution_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SymbolicExecution_SOURCES})

target_compile_features(SymbolicExecution PRIVATE
	cxx_std_17
)

target_compile_options(SymbolicExecution PRIVATE
	"$<$<CXX_COMPILER_ID:MSVC>:/WX>"
	"$<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-Wall>"
)

target_include_directories(SymbolicExecution PRIVATE
	include
)

target_link_libraries(SymbolicExecution PRIVATE
	Zydis
	LIEF::LIEF
	fmt::fmt-header-only
	argparse
	pyvex
)

set_target_properties(SymbolicExecution PROPERTIES
	CXX_STANDARD_REQUIRED
		ON
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT SymbolicExecution)
endif()

# Target: Test
set(Test_SOURCES
	"test/AVLTest.cpp"
	"test/BlockTest.cpp"
	"test/FileUtilTest.cpp"
	"test/FunctionTest.cpp"
	"test/LiftingTest.cpp"
	"test/RecursiveDisassembleTest.cpp"
	"src/ReadFileUtil.cpp"
	"src/TraversalDisassemble.cpp"
	"src/block/Block.cpp"
	"src/block/Dominator.cpp"
	"src/block/Function.cpp"
	cmake.toml
)

add_executable(Test)

target_sources(Test PRIVATE ${Test_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${Test_SOURCES})

target_compile_definitions(Test PRIVATE
	NOMINMAX
)

target_compile_features(Test PRIVATE
	cxx_std_17
)

target_compile_options(Test PRIVATE
	"$<$<CXX_COMPILER_ID:MSVC>:/WX>"
	"$<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-Wall>"
)

target_include_directories(Test PRIVATE
	include
)

target_link_libraries(Test PRIVATE
	Zydis
	LIEF::LIEF
	fmt::fmt-header-only
	GTest::gtest
	GTest::gtest_main
	GTest::gmock
	GTest::gmock_main
	pyvex
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT Test)
endif()

enable_testing()

add_test(
	NAME
		Test_AVL
	WORKING_DIRECTORY
		"${CMAKE_CURRENT_LIST_DIR}/src"
	COMMAND
		Test
)

